# =============================
# = farm.medu.se CTest script =
# =============================

# This file should be included from a project specific script

# -----------------
# - CTest Options -
# -----------------
set(CTEST_DASHBOARD_ROOT "$ENV{HOME}/build")
set(CTEST_PROJECT_DIRECTORY "${PROJECT_NAME}-${GIT_BRANCH}")
set(CTEST_SOURCE_DIRECTORY "${CTEST_DASHBOARD_ROOT}/${CTEST_PROJECT_DIRECTORY}")
set(CTEST_BINARY_DIRECTORY
  "${CTEST_DASHBOARD_ROOT}/${CTEST_PROJECT_DIRECTORY}-build")

# --------------------------
# - CTest Host Environment -
# --------------------------
set(${CMAKE_SYSTEM_NAME} True)

# Craft GitHub URL
set(GITHUB "git://github.com/${GITHUB_ACCOUNT}/${GITHUB_PROJECT}.git")

# Find make XXX: This UNIXish
find_program(MAKE NAMES make)

# Find git
find_program(CTEST_GIT_COMMAND NAMES git)
set(CTEST_CHECKOUT_COMMAND
  "${CTEST_GIT_COMMAND} clone ${GITHUB} ${CTEST_PROJECT_DIRECTORY}")
set(CTEST_UPDATE_COMMAND "${CTEST_GIT_COMMAND}")

# Find optional programs
if (Linux)
  find_program(CTEST_COVERAGE_COMMAND NAMES gcov)
  find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
endif(Linux)

# Hostname
find_program(HOSTNAME_CMD NAMES hostname)
exec_program(${HOSTNAME_CMD} ARGS OUTPUT_VARIABLE HOSTNAME)
set(CTEST_SITE "${HOSTNAME}")

# Build name
set(CTEST_BUILD_NAME "${OS_NAME}-${OS_VERSION}-${ARCH_NAME}-${COMPILER_NAME}-${COMPILER_VERSION}-${GIT_BRANCH}")

# CMake generation
if (UNIX)
  set(CTEST_CMAKE_GENERATOR "Unix Makefiles")
else (WIN32)
  set(CTEST_CMAKE_GENERATOR "Visual Studio")
endif ()
set(CTEST_CONFIGURE_COMMAND
  "${CMAKE_COMMAND} \"-DCMAKE_C_COMPILER=${COMPILER_NAME}\"")
set(CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} ${CONFIGURE_COMMAND}")
set(CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} \"-G${CTEST_CMAKE_GENERATOR}\"")
set(CTEST_CONFIGURE_COMMAND "${CTEST_CONFIGURE_COMMAND} \"${CTEST_SOURCE_DIRECTORY}\"")

# make options
set(CTEST_BUILD_COMMAND "${MAKE} ${OPTION_BUILD}")

# -----------------
# - CDash Options -
# -----------------
set(CTEST_PROJECT_NAME "${PROJECT_NAME}")
set(CTEST_NIGHTLY_START_TIME "00:00:00 EST")
set(CTEST_DROP_METHOD "http")
set(CTEST_DROP_SITE "farm.medu.se")
set(CTEST_DROP_LOCATION "/submit.php?project=${PROJECT_NAME}")
set(CTEST_DROP_SITE_CDASH TRUE)

# ---------------
# - Ctest rules -
# ---------------
if (NOT EXISTS "${CTEST_SOURCE_DIRECTORY}")
  message(" -- Clone ${GITHUB} branch ${GIT_BRANCH} --")
else()
  # Prevent CTest from fail the clone 
  set(CTEST_CHECKOUT_COMMAND "true")
endif()

message(" -- Start ${MODEL}-${CTEST_BUILD_NAME} --")
ctest_start(${MODEL})

# This line totally wipe out the build directory
ctest_empty_binary_directory(${CTEST_BINARY_DIRECTORY})

message(" -- Update ${GIT_BRANCH} --")
ctest_update()
message(" -- Configure --")
ctest_configure()
message(" -- Build --")
ctest_build()
message(" -- Test --")
ctest_test()
if (WITH_MEMCHECK AND CTEST_COVERAGE_COMMAND)
  message(" -- Coverage (optional) --")
  ctest_coverage()
endif (WITH_MEMCHECK AND CTEST_COVERAGE_COMMAND)
if (WITH_MEMCHECK AND CTEST_MEMORYCHECK_COMMAND)
  message(" -- Memcheck (optional) --")
  ctest_memcheck()
endif()
message(" -- Submit --")
ctest_submit(RETURN_VALUE)

message(" -- Done --")

